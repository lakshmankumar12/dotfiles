
alias vlc='/Applications/VLC.app/Contents/MacOS/VLC'
alias vlcnv='/Applications/VLC.app/Contents/MacOS/VLC --no-video'
alias dn='cd ${HOME}/Downloads'
alias dns='cd ${HOME}/Downloads/songs-download'
alias dnse='cd ${HOME}/Downloads/songs-download/English'

rmdll() {
    launchctl list | grep local.reminder
}

rmdld() {
    for i in $(\ls /Users/lakshman_narayanan/Library/LaunchAgents/local.reminder*plist) ; do
        launchctl load $i
    done
}

rmdun() {
    count=$(rmdlist | wc -l)
    if [ ${count} -gt 0 ] ; then
        launchctl list | awk '/local.reminder/ {system("launchctl unload /Users/lakshman_narayanan/Library/LaunchAgents/" $3 ".plist");}'
    fi
    echo "Unloaded ${count} items"
}

#Copied from oh-my-zsh/plugins/osx/osx.plugin.zsh

#mnemonic : 'P'rint 'F'in'D'er
function pfd() {
  osascript 2>/dev/null <<EOF
    tell application "Finder"
      return POSIX path of (target of window 1 as alias)
    end tell
EOF
}

function pfs() {
  osascript 2>/dev/null <<EOF
    set output to ""
    tell application "Finder" to set the_selection to selection
    set item_count to count the_selection
    repeat with item_index from 1 to count the_selection
      if item_index is less than item_count then set the_delimiter to "\n"
      if item_index is item_count then set the_delimiter to ""
      set output to output & ((item item_index of the_selection as alias)'s POSIX path) & the_delimiter
    end repeat
EOF
}

function cdf() {
  cd "$(pfd)"
}

#overrides for mac
alias ls='gls --color -F'
export SHELL=/usr/local/bin/zsh

ifaddr()
{
    ip addr show | gawk ' /^[^[:space:]]/ { ifname=$1 } /inet / { print ifname " " $2  } '
}

opens()
{
    if [ -z "$s" ] ; then 
        echo "s is not set"
        return
    fi
    echo "opening $s"
    open "$s"
}

fzfbooks()
{
    dir1="${HOME}/Google Drive/root_of_ramukkln/books"
    dir2="${HOME}/Google Drive/root-of-suraksha-park-view/books"
    fzf2dirs "$dir1" "$dir2"
}

fzfsongs()
{
    dir1="${HOME}/Google Drive/root_of_ramukkln/curated-songs"
    dir2="${HOME}/Google Drive/root-of-suraksha-park-view/curated-songs"
    dir3="${HOME}/Google Drive/root-of-suraksha-park-view/purchased-songs"
    dir3="${HOME}/Downloads/songs-download"
    fzfndirs "$dir1" "$dir2" "$dir3"
}

fzfinst()
{
    dir1="${HOME}/Google Drive/root_of_ramukkln/curated-songs/Instrumentals"
    dir2="${HOME}/Google Drive/root-of-suraksha-park-view/curated-songs/Instrumentals"
    fzf2dirs "$dir1" "$dir2"
}

fzfeng()
{
    dir1="${HOME}/Google Drive/root_of_ramukkln/curated-songs/English Collection"
    dir2="${HOME}/Google Drive/root-of-suraksha-park-view/curated-songs/English"
    fzf2dirs "$dir1" "$dir2"
}

fzfcloud()
{
    dir1="${HOME}/Google Drive"
    dir2="${HOME}/Dropbox"
    fzf2dirs "$dir1" "$dir2"
}

scrobbleUpdate()
{
    pid=$(pgrep -f scrobble)
    if [ -n "$pid" ]; then
        kill -USR1 $pid
    fi
}

# source: https://hacksformacs.wordpress.com/2015/08/20/setting-iterm2-tab-and-window-titles/
set_iterm_name() {
  mode=$1 ; shift
  echo -ne "\033]$mode;$@\007"
}
iterm_both () { set_iterm_name 0 $@; }
iterm_tab () { set_iterm_name 1 $@; }
iterm_window () { set_iterm_name 2 $@; }

qs() {
    if [ -z "$s" ]; then
        "echo var s is not set"
    fi
    quickplay.py "$@" "$s"
}

waspp() {
    $HOME/github/mac_scripts/get_track_info_spotify.py
}

volspp() {
    if [ -z "$1" ] ; then
        echo "provide volume 1 to 100. volspp <volume>"
        return
    fi
    osascript -e 'tell application "spotify" to set sound volume to '"$1"
}

m3clip() {
    ssh -nNT -R 9222:localhost:22 lakshman_narayanan@mforge3.corp.aryaka.com &
}

devclip() {
    ssh -nNT -R 9222:localhost:22 lakshman_narayanan@mydev &
}

checkclip() {
    pbpaste | less
}
alias ccc=checkclip

checkclip_keepbanging() {
    while [ 1 ] ; do
        pbpaste
        echo
        echo "----"
        sleep 1
    done
}
alias ccck=checkclip_keepbanging

machinealertlisten() {
    mc=$1
    shift
    echo "Enabling alert with ${mc}" | nc localhost 25020
    if [ $? -ne 0 ] ; then
        echo "Is the github/quick-utility-scripts/alert_tcp_listener.py running?? netcat failed"
        return 1
    fi
    ssh -nNT -R 25020:localhost:25020 lakshman_narayanan@${mc} &
}

m3alertlisten() {
    machinealertlisten mforge3 "$@"
}

devalertlisten() {
    machinealertlisten mydev "$@"
}

m1alertlisten() {
    machinealertlisten mforge1 "$@"
}

listsshes() {
    ps -eo pid=,args= | grep '[s]sh -nNT'
}

killsshes() {
    kill -9 $(ps -eo pid=,args= | grep '[s]sh -nNT')

}

vpnss() {
    scutil --nc status 'Aryaka Bangalore'
}

vpnx() {
    scutil --nc stop 'Aryaka Bangalore'
}

vpnst() {
    current_status=$(vpnss | head -n +1)
    if [ "x${current_status}" == "xDisconnected" ] ; then
        pass_file=$HOME/.mypassfile
        ##echo -n "PasswdToEncrypt:" ; read -s a ; echo ; openssl enc -aes-256-cbc -in <(echo -n $a) -out ${pass_file}
        MYPASSWD=$(openssl enc -d -aes-256-cbc -in ${pass_file} -out >(cat))
        if [ $? -ne 0 ] ; then
            echo "Didn't get passwd"
            return 1
        fi
        export MYPASSWD
        osascript ~/github/mac_scripts/vpn_script.applescript
        unset MYPASSWD
        current_status=$(vpnss | head -n +1)
        if [ "x${current_status}" == "xConnected" ] ; then
            echo "Successfully done"
        else
            echo "current_status is ${current_status}"
        fi
    else
        echo "current_status is ${current_status}. Skipping"
    fi
}

vpnre() {
    vpnx
    vpnst
}

killallvimsinmac() {
    cmds=$(awk  'NR==FNR {pane=$7;tty=substr($8,6,7); ttydict[tty]=pane;next} 1 { printf "tmux send-keys -t '"'"'%s'"'"' \"Esc\" '"'"'::qa'"'"' \"C-m\"\n",ttydict[$6]}' FS='|' <(listalltmuxpanes) FS=" " <(ps -ef | grep '[n]vim'))
    echo ${cmds} | while read i ; do eval $i ; done
}

cps() {
    if [ -z "$s" ] ; then
        echo "s is empty. Aborting"
        return 1
    fi
    if [[ $(echo $s | wc -l | tr -d ' ') != "1" ]] ; then
        echo "s is bigger than a line. Aborting"
        return 1
    fi
    echo -n $s | pbcopy -
    echo "copied: $s"
}

pwdc() {
    pwd | pbcopy -
}

focus() {
    if [ -z "$1" ]; then
        echo "Usage: focus <n-minutes>"
        return 1
    fi
    time_requested=$1 ; shift
    pid=$(ps -o pid,args | grep '[f]ocus')
    if [ -n "$pid" ] ; then
        echo "focus timer already running"
        echo $pid
        return 1
    fi
    started=$(date '+%Y-%m-%d-%H-%M-%S')
    start_timer.sh -t ${time_requested} -m "focus ${time_requested}"
    if [ $? -eq 0 ] ; then
        finished=$(date '+%Y-%m-%d-%H-%M-%S')
        echo "Focus started at ${started} and ended at ${finished}. Time Requested ${time_requested}" >> ~/.focus_times
    fi
}

count_today_focus() {
    if [ -z "$1" ] ; then
        today=$(date +'%m-%d')
    else
        today="$1"
    fi
    cnt=$(grep $(date +'%m-%d') ~/.focus_times  | wc -l)
    echo "Focus counts for $today is: $cnt"
}

loopone() {
    if [ -z "$s" ] ; then
        echo "\$s is not set"
        return 1
    fi
    if [ ! -f "$s" ] ; then
        echo "\$s:$s doest seem to be a valid file"
        return 1
    fi
    if [ -z "$SONG_VOLUME" ] ; then
        SONG_VOLUME=100
    fi
    echo "SONG_VOLUME set at ${SONG_VOLUME}"
    ( while [ 1 ] ; do  date ; qs -v ${SONG_VOLUME} ; echo ; reset ; done )
}

looponekill() {
    kill -9 $(ps -ef | grep '[q]uickplay' | awk '{print $3}')
}

utf8toclip() {
    utf8=$1
    echo -e -n ${utf8} | pbcopy -
}

dumpclip() {
    count=$(pbpaste - | wc -c)
    if [[ $count -gt 100 ]] ; then
        pbpaste - | hexdump -C | less
    else
        pbpaste - | hexdump -C
    fi
}

dumpclipforcopy() {
    pbpaste - | hexdump -e '"\\\x"/1 "%02x"'
}

decipher_unicode() {
    python3 -c 'import sys;a=sys.argv[1]; [print("U+%05x %25s %s"%(ord(i),bytes(i.encode("utf-8")),i)) for i in a ]' $1
}

decipher_unicode_clip() {
    decipher_unicode $(pbpaste -)
}

devnahelp() {
    $HOME/github/quick-utility-scripts/devnachar.py --help
}
alias dvh=devnahelp

devnaload() {
    $HOME/github/quick-utility-scripts/devnachar.py "$@" | tee >(pbcopy -)
}
alias dvl=devnaload

tamhelp() {
    $HOME/github/quick-utility-scripts/tamilchar.py --help
}

tamload() {
    $HOME/github/quick-utility-scripts/tamilchar.py "$@" | tee >(pbcopy -)
}
