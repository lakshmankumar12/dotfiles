export EMAIL_ADDR=Lakshman_Kumar.Narayanan@alcatel-lucent.com
alias ls='ls --color -F'
alias grep='egrep --color'
alias gitnp='git --no-pager'
alias npgit='git --no-pager'
alias gr='cd ./$(git rev-parse --show-cdup)'
alias ttyrec='/home/lnara002/software/ttyrec/ttyrec/ttyrec'
alias ttygif='/home/lnara002/software/ttygif/ttygif'
alias ttygif_concat='/home/lnara002/software/ttygif/concat.sh'
alias lsdir='find . -maxdepth 1 ! -path . -type d'

export WINCYG='/Users/lnara002/cygwin'
export WINNOTES='/Users/lnara002/cygwin/notes/git-tracks'
export WINWS='/drive_c/home/lnara002/linux'
export WINHOME='/drive_c/Users/lnara002'
export WINDWN='/drive_c/Users/lnara002/Downloads'
export WINLK='/drive_c/Lakshman'
export WINTMP='/drive_c/Lakshman/temp'
export WINRS='/drive_c/Users/lnara002/cygwin/repo-of-scripts'
export WINGH='/drive_c/Users/lnara002/cygwin/github'
export WSROOT='/home/lnara002/ws'
export FORGE='lakshman_narayanan@mforge2:/home/lakshman_narayanan'
export GOPATH="$HOME/gopath"
export PYTHONPATH="$HOME/local/lib/python2.6/site-packages"

export PATH=$HOME/bin:$PATH

alias wincyg="cd $WINCYG"
alias winnotes="cd $WINNOTES"
alias winws="cd $WINWS"
alias winhome="cd $WINHOME"
alias windwn="cd $WINDWN"
alias winlk="cd $WINLK"
alias wintmp="cd $WINTMP"
alias winrs="cd $WINRS"
alias wingh="cd $WINGH"
alias lcache="cd $GITLOCALCACHE"
alias cdw="cd $WSROOT"


alias cscope="$HOME/bin/cscope"

alias findf='percol --match-method=regex ../tags_f'
alias finds='percol --match-method=regex ../tags_s'
alias findm='percol --match-method=regex ../tags_m'
alias findd='percol --match-method=regex ../tags_d'
alias findgf='percol --match-method=regex ../gtp_tags_f'
alias findgs='percol --match-method=regex ../gtp_tags_s'
alias findgm='percol --match-method=regex ../gtp_tags_m'
alias findgd='percol --match-method=regex ../gtp_tags_d'


export PATH=$PATH:$WINCYG/scripts
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
export EDITOR=vim
export GITHUB="git@github.com:lakshmankumar12"
export GITLAB="git@gitlab.com:lakshmankumar12"
export BITBUCKET="git@bitbucket.org:lakshmankumar12"

ovcs()
{
  # over-writes cscope
  mv tmpcsc cscope.out
  mv tmpcsc.in cscope.in.out
  mv tmpcsc.po cscope.po.out
}


newcsc()
{
  echo "Rebuilding cscope from cscope.files into tmpcsc"
  if [ ! -f cscope.files ] ; then
    echo "Huh .. There is no cscope.files"
    return 1
  fi
  if [ -f tmpcsc.out ] ; then
    echo "Huh .. There is already a tmpcsc.out here. Please clean that up first!"
    return 1
  fi
  echo "starting cscope in background"
  cscope -bqki cscope.files -f tmpcsc &
  cscope_pid=$!
  echo -n "Rebuilding ctags .. "
  ctags -L cscope.files --c++-kinds=+p --fields=+iaS --extra=+q
  egrep ';"[[:space:]]f' tags > tags_f
  egrep ';"[[:space:]]m' tags > tags_m
  egrep ';"[[:space:]](s|t)' tags > tags_s
  egrep ';"[[:space:]](d|e)' tags > tags_d
  echo "done"
  echo -n "waiting for cscope($cscope_pid) to complete .. "
  check_for_pid $cscope_pid
  ovcs
  echo "done"
}

check_for_pid()
{
  if [ -z "$1" ] ; then
    echo "supply pid"
    return
  fi

  pid=$1
  while [ 1 ] ; do
    kill -s 0 $pid 2> /dev/null
    if [ $? -eq 0 ] ; then
      sleep 2
    else
      break
    fi
  done
}

analy()
{
  cat /proc/$1/cmdline | tr '\0' '\n'
}

howlong()
{
  ps -o "%p %t" $1
}

mkf()
{
  ps -ef | grep '\<mk\>' | grep -v egrep | sort -u -k6,6
}

mkp()
{
  if [ -n "$1" ] ; then
    echo $1 > ~/.current_mk_progress_pid
  fi
  pid=$(cat ~/.current_mk_progress_pid)
  kill -s 0 $pid 2> /dev/null
  if [ $? -ne 0 ] ; then
    echo "pid $pid isn't available"
    return 1
  fi
  echo "pid is $pid"
  ls -l /proc/$pid/cwd
  pstree -p $pid
  howlong $pid
  pand=$(\ls -l /proc/$pid/cwd | awk '{print $11}')
  tput setaf 4
  echo "comments:"
  tput sgr0
  cat $pand/../comments
  tput setaf 4
  echo "log.txt progress:"
  tput sgr0
  wc $pand/log.txt
  tput setaf 4
  echo "db machine:"
  tput sgr0
  cat $pand/db2_user_cfg
  tput setaf 4
  echo "prefs file:"
  tput sgr0
  find $pand -name prefs.mk | parallel --no-notice 'echo {}; cat {}'
}

pc()
{
  if [ -z "$testbed" ] ; then
    echo "testbed is not set";
    return
  fi
  if [ -z "$TDISPLAY" ] ; then
    echo "TDISPLAY is not set";
    return ;
  fi
  echo "Sending to testbed: $testbed, TDISPLAY: $TDISPLAY .. xsel is:"
  xsel -b
  xsel -b | ssh $testbed@$testbed "DISPLAY=$TDISPLAY" xclip
}

shareclip()
{
   xsel -b > ~/chrome-Downloads/a.txt
   unix2dos ~/chrome-Downloads/a.txt
}

inclip()
{
  dos2unix < ~/chrome-Downloads/clipboard.txt | xsel -i -b
  dos2unix < ~/chrome-Downloads/clipboard.txt | xsel -i -p
  dos2unix < ~/chrome-Downloads/clipboard.txt | xsel -i -s
}


pgprog()
{
  file=$(ps -ef | grep panosgrep | grep tmp | awk '{print $13}' | cut -c2-)
  if [ -z "$file" ] ; then echo "looks like no panosgrep is in progress" ; return ; fi
  less $file
}

calc()
{
  bc <<< "scale=2; $*"
}

dtsdir()
{
  if [ -z "$1" ]  ; then
    echo "supply DTS"
    return 1
  fi
  if [ ! -d /home/lnara002/ws/dts/$1 ] ; then
    mkdir /home/lnara002/ws/dts/$1
  fi
  cd /home/lnara002/ws/dts/$1
}

check_sanity()
{
  if [ -z "$CURRENT_PANOS" ]; then
    echo "CURRENT_PANOS is not set. Do setr first"
    return 1
  fi
  if [[ ! $(pwd) == *"$CURRENT_PANOS"* ]] ; then
    echo "CURRENT_PANOS:$CURRENT_PANOS doesn't seem to be in pwd:$(pwd)"
    return 1
  fi
  return 0
}

cdr()
{
  check_sanity; if [ $? -ne 0 ] ; then return 1 ; fi
  cd $CURRENT_PANOS
}

cdp()
{
  check_sanity; if [ $? -ne 0 ] ; then return 1 ; fi
  cd $CURRENT_PANOS/panos
}

cdpbinx()
{
  check_sanity; if [ $? -ne 0 ] ; then return 1 ; fi
  cd $CURRENT_PANOS/panos/bin/7xxx-i386
}

cdpbinx64()
{
  check_sanity; if [ $? -ne 0 ] ; then return 1 ; fi
  cd $CURRENT_PANOS/panos/bin/7xxx-x86_64
}

cdpchile()
{
  check_sanity; if [ $? -ne 0 ] ; then return 1 ; fi
  cd $CURRENT_PANOS/panos/bin/7xxx-chile
}

cdplg()
{
  check_sanity; if [ $? -ne 0 ] ; then return 1 ; fi
  cd $CURRENT_PANOS/panos/lte_gtp
}

cdpg()
{
  check_sanity; if [ $? -ne 0 ] ; then return 1 ; fi
  cd $CURRENT_PANOS/panos/gen
}

testbd()
{
  if [ -z "$testbed" -a -z "$1" ] ; then
    echo "no testbed is set"
  fi
  if [ -n "$1" ] ; then
    echo "seting testbed to $1"
    export testbed=$1
  else
    echo "using testbed $testbed"
  fi
  ssh -X $testbed@$testbed
}

vi()
{
  $HOME/bin/vim $*
}

nvim()
{
  /home/lnara002/software/neovim/neovim/postinstall/bin/nvim $*
}

do_on_success()
{
  if [ $? -ne 0 ] ; then
    echo "previous status was failure"
    return
  fi
  $*
}

open_conver()
{
  if [ -z "$1" ] ; then
    echo "Supply the html file"
    return 1
  fi
  if [ ! -f "$1" ] ; then
    echo "html file $1 doesn't seem to be present"
    return 1
  fi
  htmltotext.py $1 | vim -R -
}

listtmuxpanes()
{
  if [ -z "$1" ] ; then
    session=main
  else
    session="$1"
  fi
  tmux list-panes -s -t $session -F "#I|#W|#P|#T|#{pane_tty}"
}

listtmuxlog()
{
   ps -ef | grep '\<cat\>' | grep -v grep
   pids=$(ps -ef | grep '\<cat\>' | grep -v grep | awk '{print $2}')
   for i in $pids ; do
     echo "$i"
     lsof -p $i
   done
}
alias ltl=listtmuxlog

dumptmuxpane()
{
   if [ -z "$3" ] ; then
      session=""
   else
      session=$3
   fi
   if [ -z "$2" ] ; then
      file="log.txt"
   else
      file=$2
   fi
   if [ -z "$1" ] ; then
      echo "Supply window-name"
      echo "Usage: $0 <window> [<filename> [<session>]]"
   else
      window=$1
   fi
   tmux capture-pane -eCJ -S- -t $session:$window
   tmux save-buffer $file
}

viewpdf()
{
  if [ -z "$1" ] ; then
    echo "Supply pdf file"
    return 1
  fi
  pdftotext -layout $1 - | vim -R -
}

tmuxatt()
{
  if [ -z "$1" ] ; then
    session="main"
  else
    session="$1"
  fi
  export TERM=screen-256color-bce
  tmux -2 attach -d -t $session
}

tmuxrandchoose()
{
  FILE=/tmp/chossepanetmux
  FILE2=/tmp/chossepanetmux2
  tmux list-panes -a -F "#S | #I | #W | #P | #T" | /home/lnara002/github/fzf/bin/fzf-tmux -d 20% --exact --reverse --no-sort > $FILE
  session=$(cut -d\| -f 1 $FILE | sed -e 's/^ *//g;s/ *$//g')
  window=$(cut -d\| -f 2 $FILE | sed -e 's/^ *//g;s/ *$//g')
  echo -n "$session:$window" > $FILE2
}

ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -a -F '#S:#I:#W:#P:#T - #{pane_current_path} #{pane_current_command}' | nl -s ':')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')
  current_session=$(tmux display-message -p '#S')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf-tmux -d 20% --exact --reverse --no-sort ) || return

  target_session=$(echo $target | awk 'BEGIN{FS=":"} {print$2}')
  target_window=$(echo $target | awk 'BEGIN{FS=":"} {print$3}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":"} {print$5}')
  echo "$target" > /tmp/debugftpane
  echo "$target_session:$target_window.$target_pane" >> /tmp/debugftpane
  echo "$current_session:$current_window.$current_pane" >> /tmp/debugftpane

  if [[ $current_session != $target_session ]]; then
    tmux switch-client -t $target_session
  fi
  tmux select-pane -t ${target_window}.${target_pane} &&
  tmux select-window -t $target_window
}

tmux_pane_title() {
  if [ -z "$1" ]; then
    echo "supply title"
    return
  fi
  printf '\033]2;%s\033\\' $1
}

tmux_win_title() {
  if [ -z "$1" ]; then
    echo "supply title"
    return
  fi
  printf '\033k%s\033\\' $1
}

tmux_set_fg_color() {
  if [ -z "$1" ]; then
    echo "supply a number from 0(default) to 2"
    return
  fi
  value="default"
  if [ $1 -eq "1" ]; then
    value="fg=colour48"
  elif [ $1 -eq "2" ]; then
    value="fg=colour200"
  fi
  tmux select-pane -P $value
}

gotoNofifPane() {
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')
  current_session=$(tmux display-message -p '#S')

  target_session="aux"
  target_window="0"
  target_pane="0"

  if [[ $current_session != $target_session ]]; then
    tmux switch-client -t $target_session
  fi
  tmux select-pane -t ${target_window}.${target_pane} &&
  tmux select-window -t $target_window
}


# From https://gist.github.com/msabramo/746585#file-pyval-sh
_pyval() {
    local python_cmd="print $@"
    python -c "${python_cmd}"

    case "$shopts" in
        *noglob*) ;;
        *) set +f;;
    esac

    unset shopts
}
alias pyval='shopts="$SHELLOPTS"; set -f; _pyval'

makemp3()
{
   if [ -z "$1" -o -z "$2" ] ; then
      echo "makemp3 <whatever> <target>"
      return 1
   fi
   avconv -i "$1" -vn -acodec libmp3lame "$2".mp3
}

rejigcovermp3()
{
  \ls *.mp3 | tr '\n' '\0' | xargs -0 -n 1 eyeD3 --remove-images
  \ls *.mp3 | tr '\n' '\0' | xargs -0 -n 1 eyeD3 -2 --add-image 'cover.jpg:FRONT_COVER'
}

extractcovermp3()
{
  if [ -z "$1" ] ; then
    echo "supply mp3"
    return
  fi
  coverdir="cover-$1"
  mkdir -p "$coverdir"
  if [ $? -ne 0 ] ; then
    echo "problem creating dir"
    return
  fi
  eyeD3 "--write-images=$coverdir" "$1"
}

loaddisplay()
{
   echo $DISPLAY > /tmp/last_display
   DISP_FILE=~/.displayset
   if [ -f $DISP_FILE ] ; then
     perl -pi -e 'chomp if eof' $DISP_FILE
     export DISPLAY=$(cat $DISP_FILE)
   fi
}
loaddisplay

removecolorandctrlm()
{
    if [ ! -f $1 ] ; then
      echo "Supply a file name"
      return
    fi
    sed -i -r -e 's:\x1B\[[0-9;]*[mK]::g' -e 's:\x0d::g' $1
}

resetclipvm()
{
  op=$(ps -ef | grep VBoxClient | grep clip)
  lines=$(echo $op | wc -l)
  if [ $lines -ne 1 ] ; then
    echo "Got more than one line - $op"
    return 1
  fi
  pid=$(echo $op | awk '{print $2}')
  echo "killing pid: $pid, op:$op"
  kill -9 $pid
  echo "starting again"
  /usr/bin/VBoxClient --clipboard
}
if [ -e ~/.bashrc.centos ] ; then
  source ~/.bashrc.centos
fi

fd()
{
  local dir
  # ./ is default, other find from $1
  # path "*/\.*" -prune will filter out hidden dirs
  # -o
  dir=$(find -L ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m --exact) &&
  cd "$dir"
}

fdg()
{
  a=./$(git root)
  if [ $? -ne 0 ] ; then
    echo "Trouble with git root"
    return
  fi
  b=$(cd $a; pwd)
  fd $b
}

cmdsh2ndpart()
{
  FILE=/tmp/tmuxbuffer/resultcmdsh
  DIR_PREFIX=$(dirname $FILE)
  if [ -f $FILE ] ; then
    :
  else
    #/usr/bin/inotifywait $DIR_PREFIX -e create -e moved_to | while read path action file; do : ; done
    sleep 2
  fi
  if [ -s $FILE ] ; then
    :
  else
    echo " " > $FILE
  fi
  perl -pi -e 's/^;#.*?;#\s*//;s/\s*;#.*$//;chomp if eof' $FILE
}

cmdsh()
{
  GREPPER_CMD=/home/lakshman_narayanan/bitbucket/aryaka-notes/grepper_commands
  FILE=/tmp/tmuxbuffer/resultcmdsh
  DIR_PREFIX=$(dirname $FILE)
  rm -f /tmp/tmuxbuffer/resultcmdsh
  cat $GREPPER_CMD | /home/lakshman_narayanan/bin/fzf-tmux -d 20% --exact --reverse --no-sort -m > $FILE
}

