export EMAIL_ADDR=lakshmankumar@gmail.com
alias ls='ls --color -F'
alias grep='egrep --color'
alias gitnp='git --no-pager'
alias npgit='git --no-pager'
alias gr='cd ./$(git rev-parse --show-cdup)'
alias ttyrec='$HOME/software/ttyrec/ttyrec/ttyrec'
alias ttygif='$HOME/software/ttygif/ttygif'
alias ttygif_concat='$HOME/software/ttygif/concat.sh'
alias lsdir='find . -maxdepth 1 ! -path . -type d'
alias man='TERM=xterm man'
alias grt='cd ./$(git root) ; export GITROOT=$(pwd)'
alias recfg='. ~/.zshrc'

#bless my typo
alias snv=svn
alias svnst="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | sort"
alias snvst="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | sort"
alias svnstm="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | grep '^M'"
alias snvstm="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | grep '^M'"
alias svnstx="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | grep '^X'"
alias snvstx="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | grep '^X'"
alias svnstq="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | grep '^\?'"
alias snvstq="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | grep '^\?'"
alias svnstt="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | grep '^\~'"
alias snvstt="svn status  | grep -v 'status on external item' | grep -E -v '^[[:space:]]*$' | grep '^\~'"

alias psme="ps -ef | grep '^521'"

alias tnew="$HOME/gitlab/aryaka-scripts/setup.py -s -i"
alias tkill="$HOME/gitlab/aryaka-scripts/setup.py -k -i"
alias tkillx="$HOME/gitlab/aryaka-scripts/setup.py -k -i -x"

export FORGE='lakshman_narayanan@mforge2:/home/lakshman_narayanan'
export GOPATH="$HOME/gopath"
export PYTHONPATH="$HOME/local/lib/python2.6/site-packages"

export PATH=$HOME/bin:$PATH
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
export EDITOR=vim
export GITHUB="git@github.com:lakshmankumar12"
export GITLAB="git@gitlab.com:lakshmankumar12"
export BITBUCKET="git@bitbucket.org:lakshmankumar12"

ovcs()
{
  # over-writes cscope
  mv tmpcsc cscope.out
  mv tmpcsc.in cscope.in.out
  mv tmpcsc.po cscope.po.out
}

newcsc()
{
  echo "Rebuilding cscope from cscope.files into tmpcsc"
  if [ ! -f cscope.files ] ; then
    echo "Huh .. There is no cscope.files"
    return 1
  fi
  if [ -f tmpcsc.out ] ; then
    echo "Huh .. There is already a tmpcsc.out here. Please clean that up first!"
    return 1
  fi
  echo "starting cscope in background"
  cscope -bqki cscope.files -f tmpcsc &
  cscope_pid=$!
  echo -n "Rebuilding ctags .. "
  ctags -L cscope.files --c++-kinds=+p --fields=+iaS --extra=+q
  egrep ';"[[:space:]]f' tags > tags_f
  egrep ';"[[:space:]]m' tags > tags_m
  egrep ';"[[:space:]](s|t)' tags > tags_s
  egrep ';"[[:space:]](d|e)' tags > tags_d
  echo "done"
  echo -n "waiting for cscope($cscope_pid) to complete .. "
  check_for_pid $cscope_pid
  ovcs
  echo "done"
}

check_for_pid()
{
  if [ -z "$1" ] ; then
    echo "supply pid"
    return
  fi

  pid=$1
  while [ 1 ] ; do
    kill -s 0 $pid 2> /dev/null
    if [ $? -eq 0 ] ; then
      sleep 2
    else
      break
    fi
  done
}

analy()
{
  cat /proc/$1/cmdline | tr '\0' '\n'
}

howlong()
{
  ps -o "%p %t" $1
}

calc()
{
  bc <<< "scale=2; $*"
}

vi()
{
  $HOME/bin/vim -u $HOME/.vimrc $*
}

nvim()
{
  $HOME/software/neovim/neovim/postinstall/bin/nvim $*
}

viewpdf()
{
  if [ -z "$1" ] ; then
    echo "Supply pdf file"
    return 1
  fi
  pdftotext -layout $1 - | vim -R -
}

do_on_success()
{
  if [ $? -ne 0 ] ; then
    echo "previous status was failure"
    return
  fi
  $*
}

open_conver()
{
  if [ -z "$1" ] ; then
    echo "Supply the html file"
    return 1
  fi
  if [ ! -f "$1" ] ; then
    echo "html file $1 doesn't seem to be present"
    return 1
  fi
  htmltotext.py $1 | vim -R -
}

#all tmux stuff
listtmuxpanes()
{
  if [ -z "$1" ] ; then
    session=main
  else
    session="$1"
  fi
  tmux list-panes -s -t $session -F "#I|#W|#P|#T|#{pane_tty}"
}

listtmuxlog()
{
   ps -ef | grep '\<cat\>' | grep -v grep
   pids=$(ps -ef | grep '\<cat\>' | grep -v grep | awk '{print $2}')
   for i in $pids ; do
     echo "$i"
     lsof -p $i
   done
}
alias ltl=listtmuxlog

dumptmuxpane()
{
   if [ -z "$3" ] ; then
      session=""
   else
      session=$3
   fi
   if [ -z "$2" ] ; then
      file="log.txt"
   else
      file=$2
   fi
   if [ -z "$1" ] ; then
      echo "Supply window-name"
      echo "Usage: $0 <window> [<filename> [<session>]]"
   else
      window=$1
   fi
   tmux capture-pane -eCJ -S- -t $session:$window
   tmux save-buffer $file
}

tmuxatt()
{
  if [ -z "$1" ] ; then
    session="main"
  else
    session="$1"
  fi
  export TERM=screen-256color-bce
  tmux -2 attach -d -t $session
}

tmuxrandchoose()
{
  FILE=/tmp/chossepanetmux
  FILE2=/tmp/chossepanetmux2
  tmux list-panes -a -F "#S | #I | #W | #P | #T" | fzf-tmux -d 20% --exact --reverse --no-sort > $FILE
  session=$(cut -d\| -f 1 $FILE | sed -e 's/^ *//g;s/ *$//g')
  window=$(cut -d\| -f 2 $FILE | sed -e 's/^ *//g;s/ *$//g')
  echo -n "$session:$window" > $FILE2
}

ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -a -F '#S:#I:#W:#P:#T - #{pane_current_path} #{pane_current_command}' | nl -s ':')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')
  current_session=$(tmux display-message -p '#S')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf-tmux -d 20% --exact --reverse --no-sort ) || return

  target_session=$(echo $target | awk 'BEGIN{FS=":"} {print$2}')
  target_window=$(echo $target | awk 'BEGIN{FS=":"} {print$3}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":"} {print$5}')
  echo "$target" > /tmp/debugftpane
  echo "$target_session:$target_window.$target_pane" >> /tmp/debugftpane
  echo "$current_session:$current_window.$current_pane" >> /tmp/debugftpane

  if [[ $current_session != $target_session ]]; then
    tmux switch-client -t $target_session
  fi
  tmux select-pane -t ${target_window}.${target_pane} &&
  tmux select-window -t $target_window
}

tmux_win_title_get()
{
  #tmux list-panes -s -F "#W|#{pane_id}" | grep --color=none "$TMUX_PANE" | cut -d\| -f 1
  echo $(tmux display-message -p '#W')
}

tmux_pane_title_get()
{
  #tmux list-panes -s -F "#T|#{pane_id}" | grep --color=none "$TMUX_PANE" | cut -d\| -f 1
  echo $(tmux display-message -p '#T')
}

tmux_pane_title_set() {
  if [ -z "$1" ]; then
    echo "supply title"
    return
  fi
  printf '\033]2;%s\033\\' $1
}

tmux_win_title_set() {
  if [ -z "$1" ]; then
    echo "supply title"
    return
  fi
  printf '\033k%s\033\\' $1
}

tmux_set_fg_color() {
  if [ -z "$1" ]; then
    echo "supply a number from 0(default) to 2"
    return
  fi
  value="default"
  if [ $1 -eq "1" ]; then
    value="fg=colour48"
  elif [ $1 -eq "2" ]; then
    value="fg=colour200"
  fi
  tmux select-pane -P $value
}

gotoNofifPane() {
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')
  current_session=$(tmux display-message -p '#S')

  target_session="test"
  target_window="0"
  target_pane="0"

  if [[ $current_session != $target_session ]]; then
    tmux switch-client -t $target_session
  fi
  tmux select-pane -t ${target_window}.${target_pane} &&
  tmux select-window -t $target_window
}

cmdsh()
{
  GREPPER_CMD=$HOME/bitbucket/aryaka-notes/grepper_commands
  FILE=/tmp/tmuxbuffer/resultcmdsh
  DIR_PREFIX=$(dirname $FILE)
  rm -f /tmp/tmuxbuffer/resultcmdsh
  cat $GREPPER_CMD | fzf-tmux -d 20% --exact --reverse --no-sort -m > $FILE
}

cmdsh2ndpart()
{
  FILE=/tmp/tmuxbuffer/resultcmdsh
  DIR_PREFIX=$(dirname $FILE)
  if [ -f $FILE ] ; then
    :
  else
    #/usr/bin/inotifywait $DIR_PREFIX -e create -e moved_to | while read path action file; do : ; done
    sleep 2
  fi
  if [ -s $FILE ] ; then
    :
  else
    echo " " > $FILE
  fi
  perl -pi -e 's/^;#.*?;#\s*//;s/\s*;#.*$//;chomp if eof' $FILE
}

tmuxsendhereanddate () {
  date=$(date)
  tmux send-keys "C-m" "C-m" "  HERE:  $date" "C-m" "C-m"
}


# From https://gist.github.com/msabramo/746585#file-pyval-sh
_pyval() {
    local python_cmd="print $@"
    python -c "${python_cmd}"

    case "$shopts" in
        *noglob*) ;;
        *) set +f;;
    esac

    unset shopts
}
alias pyval='shopts="$SHELLOPTS"; set -f; _pyval'

#mp3 stuff
makemp3()
{
   if [ -z "$1" -o -z "$2" ] ; then
      echo "makemp3 <whatever> <target>"
      return 1
   fi
   avconv -i "$1" -vn -acodec libmp3lame "$2".mp3
}

rejigcovermp3()
{
  \ls *.mp3 | tr '\n' '\0' | xargs -0 -n 1 eyeD3 --remove-images
  \ls *.mp3 | tr '\n' '\0' | xargs -0 -n 1 eyeD3 -2 --add-image 'cover.jpg:FRONT_COVER'
}

extractcovermp3()
{
  if [ -z "$1" ] ; then
    echo "supply mp3"
    return
  fi
  coverdir="cover-$1"
  mkdir -p "$coverdir"
  if [ $? -ne 0 ] ; then
    echo "problem creating dir"
    return
  fi
  eyeD3 "--write-images=$coverdir" "$1"
}

loaddisplay()
{
   echo $DISPLAY > /tmp/last_display
   DISP_FILE=~/.displayset
   if [ -f $DISP_FILE ] ; then
     perl -pi -e 'chomp if eof' $DISP_FILE
     export DISPLAY=$(cat $DISP_FILE)
   fi
}
loaddisplay

removecolorandctrlm()
{
    if [ ! -f $1 ] ; then
      echo "Supply a file name"
      return
    fi
    sed -i -r -e 's:\x1B\[[0-9;]*[mK]::g' -e 's:\x0d::g' $1
}

resetclipvm()
{
  op=$(ps -ef | grep VBoxClient | grep clip)
  lines=$(echo $op | wc -l)
  if [ $lines -ne 1 ] ; then
    echo "Got more than one line - $op"
    return 1
  fi
  pid=$(echo $op | awk '{print $2}')
  echo "killing pid: $pid, op:$op"
  kill -9 $pid
  echo "starting again"
  /usr/bin/VBoxClient --clipboard
}
if [ -e ~/.bashrc.centos ] ; then
  source ~/.bashrc.centos
fi

fd()
{
  local dir
  # ./ is default, other find from $1
  # path "*/\.*" -prune will filter out hidden dirs
  # -o
  dir=$(find -L ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m --exact) &&
  cd "$dir"
}

fdg()
{
  a=./$(git root)
  if [ $? -ne 0 ] ; then
    echo "Trouble with git root"
    return
  fi
  b=$(cd $a; pwd)
  fd $b
}

macnotify()
{
  if [ -z "$1" ] ; then
    echo "Supply message!"
    return
  fi
  message=$1
  if [ -z "$2" ] ; then
    title "No Title Given"
  else
    title=$2
  fi
  osascript -e 'display notification "'"$message"'" with title "'"$title"'"'
}

ifaddr()
{
  ip addr show | awk ' /^[0-9]+:/ { ifname=$2  } /^[  ]+inet / { print ifname " " $2  } ' | grep "$1"
}


#ary .. stuff
go () {
  if [ -z "$GITROOT" ] ; then
    grt
  fi
  if [ -n "$1" ] ; then
     choice="$1"
  else
     choice="."
  fi
  cd $GITROOT
  cd $(cat .branch_name)
  case $choice in
    ar)
      cd build.el6/ace2/anap_root
      ;;
    ai)
      cd build.el6/anap/install
      ;;
    pi)
      cd build.el6/pop/install
      ;;
    gr)
      cd ../
      ;;
    *)
      cd $choice
  esac
}
