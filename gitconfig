[user]
    email = lakshmankumar@gmail.com
    name = lakshman kumar
[includeIf "gitdir:~/genxcomm/"]
    path = .gitconfig-genxcomm
[includeIf "gitdir:/magma_vm/"]
    path = .gitconfig-genxcomm
[alias]
    dt = difftool --dir-diff
    cset = diff-tree --no-commit-id --name-only -r
    lsm = ls-files --modified
    lss = !git --no-pager diff --name-only --cached
    export = "!f() { /usr/bin/git show --pretty=format: $1 ; } ; f "
    logol = !git --no-pager log --pretty=oneline --abbrev-commit --graph --decorate -n20
    logoln = !git --no-pager log --pretty=oneline --abbrev-commit --graph --decorate
    logoln100 = !git --no-pager log --pretty=oneline --abbrev-commit --graph --decorate -n100
    supercommitpatch = "!f() { patch -p1 -i $1 ; if [ $? -ne 0 ] ; then echo \"patching failed\" ; return 1 ; fi ; chmod +w $(git ls-files --modified) ; /usr/bin/git add $(/usr/bin/git ls-files --modified) ; /usr/bin/git commit -m \"$2\" ; } ; f "
    statusporcut = !/usr/bin/git status --porcelain | cut -c4-
    bot = "!git log --pretty=oneline | tail -n 1 | cut -f 1 -d\\ "
    statusnewporcut = !/usr/bin/git status --porcelain | grep '^??' | cut -c4-
    csetr = "!f() { /usr/bin/git fetch ; /usr/bin/git log HEAD..origin/$(/usr/bin/git rev-parse --abbrev-ref HEAD) ; } ; f"
    resetbasetag = "!f() { if [ -n "$1" ]; then what=$1 ; else what=HEAD; fi ; git tag -d base ; git tag base $what ; git logol; } ; f"
    resetwttag = "!f() { if [ -n "$1" ]; then what=$1 ; else what=HEAD; fi ; git tag -d working_tip ; git tag working_tip $what ; } ; f"
    resetatag = "!f() { if [ -n \"$2\" ] ; then commitpoint=$2 ; else commitpoint=HEAD ; fi ; if [ -z \"$1\" ] ; then echo 'usage: git resetatag <tag> <new-treeish|def:HEAD>' ; return ; else tagtowork=$1 ; fi ; git tag -d $tagtowork; git tag $tagtowork $commitpoint; git logol; } ; f"
    mytags = tag -l 'lakshman*'
    newfiles = ls-files --others --exclude-standard
    reflogd = reflog --date=relative
    dno = diff --name-only
    root = rev-parse --show-cdup
    reorder = "!GIT_SEQUENCE_EDITOR=\"sed -i -n 'h;1n;/^pick/p;/^pick/n;g;p'\" git rebase"
    bsort = branch -a --sort=committerdate
    tsort = for-each-ref --sort=creatordate --format "%(refname) %(creatordate)" refs/tags
    has = "!f() { if [ -z \"$2\" ] ; then branch=\"HEAD\" ; else branch=\"$2\" ; fi ; /usr/bin/git merge-base --is-ancestor $1 $branch ; } ; f"
    whatsnew = "!f() { git fetch ; git log ..@{u} ; } ; f"
[diff]
    tool = meld
    renameLimit = 25000
[push]
    default = matching
[merge]
    tool = diffconflicts
    renameLimit = 25000
[mergetool "diffconflicts"]
    cmd = diffconflicts $HOME/bin/nvim $BASE $LOCAL $REMOTE $MERGED
    trustExitCode = true
    keepBackup = false
[mergetool "splice"]
    cmd = "/home/lnara002/bin/vim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'"
    trustExitCode = true
    keepBackup = false
[mergetool "mymeld"]
    cmd = meld "$LOCAL" "$BASE" "$REMOTE" --auto-merge --diff $BASE $MERGED
[mergetool "p4merge"]
    cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false
[difftool]
    prompt = false
[remote "origin"]
    fetch = +refs/notes/*:refs/notes/*
[apply]
    whitespace = nowarn
[svn]
    authorsfile = /home/lakshman_narayanan/ws/git-dir-for-svn/authors.txt
[safe]
    directory = /host_c/Users/laksh/work/github/autohotkey
    directory = /host_c/Users/laksh/work/github/quick-utility-scripts
	directory = /host_c/Users/laksh/work/github/sans99converter
	directory = /host_c/Users/laksh/work/github/slokas
[init]
    defaultBranch = main
